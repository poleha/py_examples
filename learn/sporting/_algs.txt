Bound slice
https://codility.com/programmers/task/count_bounded_slices/
https://github.com/poleha/py_examples/blob/master/learn/sporting/bound_slice.py

An integer K and a non-empty zero-indexed array A consisting of N integers are given.

A pair of integers (P, Q), such that 0 ≤ P ≤ Q < N, is called a slice of array A.

A bounded slice is a slice in which the difference between the maximum and minimum
values in the slice
is less than or equal to K. More precisely it is a slice, such
that max(A[P], A[P + 1], ..., A[Q]) − min(A[P], A[P + 1], ..., A[Q]) ≤ K.

The goal is to calculate the number of bounded slices.

For example, consider K = 2 and array A such that:

    A[0] = 3
    A[1] = 5
    A[2] = 7
    A[3] = 6
    A[4] = 3
There are exactly nine bounded slices:
(0, 0), (0, 1), (1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3), (4, 4).

Write a function:

def solution(K, A)

that, given an integer K and a non-empty zero-indexed array A of N integers,
returns the number of bounded slices of array A.

If the number of bounded slices is greater than 1,000,000,000, the function
should return 1,000,000,000.

For example, given:

    A[0] = 3
    A[1] = 5
    A[2] = 7
    A[3] = 6
    A[4] = 3
the function should return 9, as explained above.

Assume that:

N is an integer within the range [1..100,000];
K is an integer within the range [0..1,000,000,000];
each element of array A is an integer within the range [−1,000,000,000..1,000,000,000].
Complexity:

expected worst-case time complexity is O(N);
expected worst-case space complexity is O(N), beyond input storage
(not counting the storage required for input arguments).
Elements of input arrays can be modified.


maxINT = 1000000000

def solution1(K, A):
    count = 0
    N = len(A)
    for i in range(N):
        j = i
        mn = mx = A[i]
        while mx - mn <= K:
            count += 1
            if count == maxINT:
                return count
            j += 1
            if j >= N:
                break
            cur = A[j]
            if cur < mn: mn = cur
            if cur > mx: mx = cur
    return count


Нужно найти все подмассивы, в которых разница между максимальным и минимальным элементом
не превышает K.
Гусуница. Начинаем с начала. Двигаем голову на 1, пока while mx - mn <= K.
Как только условие нарушено - выходим из while и двигаем хвост на 1. Голову ставим = хвосту.

*************************************************************

Chocolates by numbers
https://github.com/poleha/py_examples/blob/master/learn/sporting/chocolates_by_numbers.py
https://codility.com/programmers/task/chocolates_by_numbers/
https://codility.com/programmers/task/chocolates_by_numbers/

Two positive integers N and M are given. Integer N represents the number of chocolates
arranged in a circle, numbered from 0 to N − 1.

You start to eat the chocolates. After eating a chocolate you leave only a wrapper.

You begin with eating chocolate number 0. Then you omit the next M − 1 chocolates or
wrappers on the circle, and eat the following one.

More precisely, if you ate chocolate number X, then you will next eat the chocolate with
number (X + M) modulo N (remainder of division).

You stop eating when you encounter an empty wrapper.

For example, given integers N = 10 and M = 4. You will eat the following chocolates:
0, 4, 8, 2, 6.

The goal is to count the number of chocolates that you will eat, following the above rules.

Write a function:

def solution(N, M)
that, given two positive integers N and M, returns the number of chocolates that you will
eat.

For example, given integers N = 10 and M = 4. the function should return 5,
as explained above.


def get_greatest_divisor(a, b):
    if b > a:
        a, b = b, a

    m = a % b
    if m == 0:
        return b
    else:
        return get_greatest_divisor(b, m)


@measure
def solution2(N, M):
    gd = get_greatest_divisor(N, M)
    return N / gd

Идея в том, что мы повторимся тогда, когда встанем на последний элемент.
То есть когда количество конфет /
Находим наименьший общий делитель для
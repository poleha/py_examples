# manynames.py
X = 11 # Глобальное (в модуле) имя/атрибут (X, или manynames.X)
def f():
    print(X) # Обращение к глобальному имени X (11)
def g():
    X = 22 # Локальная (в функции) переменная (X, скрывает имя X в модуле)
    print(X)
class C:
    X = 33 # Атрибут класса (C.X)
    def m(self):
        X = 44 # Локальная переменная в методе (X)
        self.X = 55 # Атрибут экземпляра (instance.X)


def g1():
    print(X) # Ссылка на глобальную переменную в модуле
def g2():
    global X
    X = 22 # Изменит глобальную переменную в модуле
def h1():
    X = 33 # Локальная в функции
    def nested():
        print(X) # Ссылка на локальную переменную в объемлющей функции
def h2():
    X = 33 # Локальная в функции
    def nested():
        nonlocal X # Инструкция из Python 3.0
        X = 44 # Изменит локальную переменную в объемлющей функции



if __name__ == '__main__':
    print(X) # 11: модуль (за пределами файла manynames.X)
    f() # 11: глобальная
    g() # 22: локальная
    print(X) # 11: переменная модуля не изменилась
    obj = C() # Создать экземпляр
    print(obj.X) # 33: переменная класса, унаследованная экземпляром
    obj.m() # Присоединить атрибут X к экземпляру
    print(obj.X) # 55: экземпляр
    print(C.X) # 33: класс (она же obj.X, если в экземпляре нет X)
    #print(C.m.X) # ОШИБКА: видима только в методе
    #print(g.X) # ОШИБКА: видима только в функции